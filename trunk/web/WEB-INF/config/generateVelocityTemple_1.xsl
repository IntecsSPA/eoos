<xsl:transform xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:eop="http://www.opengis.net/eop/2.0" xmlns:opt="http://www.opengis.net/opt/2.0" xmlns:sar="http://www.opengis.net/sar/2.0" xmlns:atm="http://www.opengis.net/atm/2.0" xmlns:alt="http://www.opengis.net/alt/2.0" xmlns:lmb="http://www.opengis.net/lmb/2.0" xmlns:ssp="http://www.opengis.net/ssp/2.0" xmlns:rep="http://ngeo.eo.esa.int/schema/metadataReport" xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:om="http://www.opengis.net/om/2.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:ows="http://www.opengis.net/ows/2.0" xmlns:stl="http://pisa.intecs.it/stl" version="2.0">
	<!--xsl:param name="sType">RADAR LIMB ATMOSPHERIC ALTIMETRIC OPTICAL</xsl:param-->
	<xsl:output method="xml" version="1.0" encoding="UTF-8" indent="no"/>
	<xsl:param name="sType">OPTICAL</xsl:param>
	<xsl:template match="model">
		<xsl:apply-templates select="generalConstant"/>
		<!--File generated by the Feed via Velocity-->
		<xsl:choose>
			<xsl:when test="$sType = 'RADAR' ">
				<sar:EarthObservation gml:id="ID_$velocityCount">
					<xsl:call-template name="fillEO"/>
				</sar:EarthObservation>
			</xsl:when>
			<xsl:when test="$sType  = 'OPTICAL'">
				<opt:EarthObservation gml:id="ID_$velocityCount">
					<xsl:call-template name="fillEO"/>
				</opt:EarthObservation>
			</xsl:when>
			<xsl:when test="$sType  = 'ATMOSPHERIC'">
				<atm:EarthObservation gml:id="ID_$velocityCount">
					<xsl:call-template name="fillEO"/>
				</atm:EarthObservation>
			</xsl:when>
			<xsl:when test="$sType  = 'ALTIMETRIC'">
				<alt:EarthObservation gml:id="ID_$velocityCount">
					<xsl:call-template name="fillEO"/>
				</alt:EarthObservation>
			</xsl:when>
			<xsl:when test="$sType  = 'LIMB'">
				<lmb:EarthObservation gml:id="ID_$velocityCount">
					<xsl:call-template name="fillEO"/>
				</lmb:EarthObservation>
			</xsl:when>
			<xsl:when test="$sType  = 'SSP'">
				<ssp:EarthObservation gml:id="ID_$velocityCount">
					<xsl:call-template name="fillEO"/>
				</ssp:EarthObservation>
			</xsl:when>
			<xsl:otherwise>
				<eop:EarthObservation gml:id="ID_$velocityCount">
					<xsl:call-template name="fillEO"/>
				</eop:EarthObservation>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="fillEO">
		<om:phenomenonTime>
			<gml:TimePeriod gml:id="tp_$velocityCount">
				<gml:beginPosition>
					<xsl:apply-templates select="attribute[@id='beginAcquisition']"/>
				</gml:beginPosition>
				<gml:endPosition>
					<xsl:apply-templates select="attribute[@id='endAcquisition']"/>
				</gml:endPosition>
			</gml:TimePeriod>
		</om:phenomenonTime>
		<om:resultTime>
			<gml:TimeInstant gml:id="archivingdate_$velocityCount">
				<gml:timePosition>
					<xsl:apply-templates select="attribute[@id='availabilityTime']"/>
				</gml:timePosition>
			</gml:TimeInstant>
		</om:resultTime>
		<om:procedure>
			<xsl:choose>
				<xsl:when test="$sType  = 'ALTIMETRIC'">
					<alt:EarthObservationEquipment gml:id="eoe_$velocityCount">
						<xsl:call-template name="fillEOE"/>
					</alt:EarthObservationEquipment>
				</xsl:when>
				<xsl:when test="$sType  = 'LIMB'">
					<lmb:EarthObservationEquipment gml:id="eoe_$velocityCount">
						<xsl:call-template name="fillEOE"/>
					</lmb:EarthObservationEquipment>
				</xsl:when>
				<xsl:when test="$sType  = 'SSP'">
					<ssp:EarthObservationEquipment gml:id="eoe_$velocityCount">
						<xsl:call-template name="fillEOE"/>
					</ssp:EarthObservationEquipment>
				</xsl:when>
				<xsl:otherwise>
					<eop:EarthObservationEquipment gml:id="eoe_$velocityCount">
						<xsl:call-template name="fillEOE"/>
					</eop:EarthObservationEquipment>
				</xsl:otherwise>
			</xsl:choose>
		</om:procedure>
		<om:observedProperty nilReason="inapplicable"/>
		<om:featureOfInterest>
			<xsl:choose>
				<xsl:when test="$sType  = 'ALTIMETRIC'">
					<alt:Footprint gml:id="fp_$velocityCount">
						<xsl:call-template name="fillFP"/>
					</alt:Footprint>
				</xsl:when>
				<xsl:when test="$sType  = 'LIMB'">
					<lmb:Footprint gml:id="fp_$velocityCount">
						<xsl:call-template name="fillFP"/>
					</lmb:Footprint>
				</xsl:when>
				<xsl:otherwise>
					<eop:Footprint gml:id="fp_$velocityCount">
						<xsl:call-template name="fillFP"/>
					</eop:Footprint>
				</xsl:otherwise>
			</xsl:choose>
		</om:featureOfInterest>
		<om:result>
			<xsl:choose>
				<xsl:when test="$sType  = 'RADAR'">
					<sar:EarthObservationResult gml:id="eor_$velocityCount">
						<xsl:call-template name="fillEOR"/>
					</sar:EarthObservationResult>
				</xsl:when>
				<xsl:when test="$sType  = 'OPTICAL'">
					<opt:EarthObservationResult gml:id="eor_$velocityCount">
						<xsl:call-template name="fillEOR"/>
					</opt:EarthObservationResult>
				</xsl:when>
				<xsl:when test="$sType  = 'ATMOSPHERIC'">
					<atm:EarthObservationResult gml:id="eor_$velocityCount">
						<xsl:call-template name="fillEOR"/>
					</atm:EarthObservationResult>
				</xsl:when>
				<xsl:when test="$sType  = 'ALTIMETRIC'">
					<alt:EarthObservationResult gml:id="eor_$velocityCount">
						<xsl:call-template name="fillEOR"/>
					</alt:EarthObservationResult>
				</xsl:when>
				<xsl:when test="$sType  = 'LIMB'">
					<lmb:EarthObservationResult gml:id="eor_$velocityCount">
						<xsl:call-template name="fillEOR"/>
					</lmb:EarthObservationResult>
				</xsl:when>
				<xsl:otherwise>
					<eop:EarthObservationResult gml:id="eor_$velocityCount">
						<xsl:call-template name="fillEOR"/>
					</eop:EarthObservationResult>
				</xsl:otherwise>
			</xsl:choose>
		</om:result>
		<eop:metaDataProperty>
		<xsl:choose>
			<xsl:when test="$sType  = 'SSP'">
				<ssp:EarthObservationMetaData>
					<xsl:call-template name="fillEOM"/>
				</ssp:EarthObservationMetaData>
			</xsl:when>
			<xsl:otherwise>
				<eop:EarthObservationMetaData>
					<xsl:call-template name="fillEOM"/>
				</eop:EarthObservationMetaData>
			</xsl:otherwise>
		</xsl:choose>
		</eop:metaDataProperty>
	</xsl:template>
	<xsl:template name="fillAcq">
		<!--TODO with eop:acquisitions 0..1 -->
		<xsl:if test="attribute[@id='orbitNumber'] != ''">
			<eop:orbitNumber>
				<xsl:apply-templates select="attribute[@id='orbitNumber']"/>
			</eop:orbitNumber>
		</xsl:if>
		<xsl:if test="attribute[@id='lastOrbitNumber'] != ''">
			<eop:lastOrbitNumber>
				<xsl:apply-templates select="attribute[@id='lastOrbitNumber']"/>
			</eop:lastOrbitNumber>
		</xsl:if>
		<xsl:if test="attribute[@id='orbitDirection'] != ''">
			<eop:orbitDirection>
				<xsl:apply-templates select="attribute[@id='orbitDirection']"/>
			</eop:orbitDirection>
		</xsl:if>
		<xsl:if test="attribute[@id='wrsLongitudeGrid'] != ''">
			<eop:wrsLongitudeGrid codeSpace="">
				<xsl:apply-templates select="attribute[@id='wrsLongitudeGrid']"/>
			</eop:wrsLongitudeGrid>
		</xsl:if>
		<xsl:if test="attribute[@id='wrsLatitudeGrid'] != ''">
			<eop:wrsLatitudeGrid codeSpace="">
				<xsl:apply-templates select="attribute[@id='wrsLatitudeGrid']"/>
			</eop:wrsLatitudeGrid>
		</xsl:if>
		<xsl:if test="attribute[@id='ascendingNodeDate'] != ''">
			<eop:ascendingNodeDate codeSpace="">
				<xsl:apply-templates select="attribute[@id='ascendingNodeDate']"/>
			</eop:ascendingNodeDate>
		</xsl:if>
		<xsl:if test="attribute[@id='ascendingNodeLongitude'] != ''">
			<eop:ascendingNodeLongitude codeSpace="">
				<xsl:apply-templates select="attribute[@id='ascendingNodeLongitude']"/>
			</eop:ascendingNodeLongitude>
		</xsl:if>
		<xsl:if test="attribute[@id='startTimeFromAscendingNode'] != ''">
			<eop:startTimeFromAscendingNode uom="ms">
				<xsl:apply-templates select="attribute[@id='startTimeFromAscendingNode']"/>
			</eop:startTimeFromAscendingNode>
		</xsl:if>
		<xsl:if test="attribute[@id='completionTimeFromAscendingNode'] != ''">
			<eop:completionTimeFromAscendingNode uom="ms">
				<xsl:apply-templates select="attribute[@id='completionTimeFromAscendingNode']"/>
			</eop:completionTimeFromAscendingNode>
		</xsl:if>
		<xsl:if test="attribute[@id='orbitDuration'] != ''">
			<eop:orbitDuration uom="ms">
				<xsl:apply-templates select="attribute[@id='orbitDuration']"/>
			</eop:orbitDuration>
		</xsl:if>
		<xsl:if test="attribute[@id='illuminationAzimuthAngle'] != ''">
			<eop:illuminationAzimuthAngle uom="deg">
				<xsl:apply-templates select="attribute[@id='illuminationAzimuthAngle']"/>
			</eop:illuminationAzimuthAngle>
		</xsl:if>
		<xsl:if test="attribute[@id='illuminationZenithAngle'] != ''">
			<eop:illuminationZenithAngle uom="deg">
				<xsl:apply-templates select="attribute[@id='illuminationZenithAngle']"/>
			</eop:illuminationZenithAngle>
		</xsl:if>
		<xsl:if test="attribute[@id='illuminationElevationAngle'] != ''">
			<eop:illuminationElevationAngle uom="deg">
				<xsl:apply-templates select="attribute[@id='illuminationElevationAngle']"/>
			</eop:illuminationElevationAngle>
		</xsl:if>
		<xsl:if test="attribute[@id='incidenceAngle'] != ''">
			<eop:incidenceAngle uom="deg">
				<xsl:apply-templates select="attribute[@id='incidenceAngle']"/>
			</eop:incidenceAngle>
		</xsl:if>
		<xsl:if test="attribute[@id='acrossTrackIncidenceAngle'] != ''">
			<eop:acrossTrackIncidenceAngle uom="deg">
				<xsl:apply-templates select="attribute[@id='acrossTrackIncidenceAngle']"/>
			</eop:acrossTrackIncidenceAngle>
		</xsl:if>
		<xsl:if test="attribute[@id='alongTrackIncidenceAngle'] != ''">
			<eop:alongTrackIncidenceAngle uom="deg">
				<xsl:apply-templates select="attribute[@id='alongTrackIncidenceAngle']"/>
			</eop:alongTrackIncidenceAngle>
		</xsl:if>
		<xsl:if test="attribute[@id='instrumentAzimuthAngle'] != ''">
			<eop:instrumentAzimuthAngle uom="deg">
				<xsl:apply-templates select="attribute[@id='instrumentAzimuthAngle']"/>
			</eop:instrumentAzimuthAngle>
		</xsl:if>
		<xsl:if test="attribute[@id='instrumentZenithAngle'] != ''">
			<eop:instrumentZenithAngle uom="deg">
				<xsl:apply-templates select="attribute[@id='instrumentZenithAngle']"/>
			</eop:instrumentZenithAngle>
		</xsl:if>
		<xsl:if test="attribute[@id='instrumentElevationAngle'] != ''">
			<eop:instrumentElevationAngle uom="deg">
				<xsl:apply-templates select="attribute[@id='instrumentElevationAngle']"/>
			</eop:instrumentElevationAngle>
		</xsl:if>
		<xsl:if test="attribute[@id='pitch'] != ''">
			<eop:pitch uom="deg">
				<xsl:apply-templates select="attribute[@id='pitch']"/>
			</eop:pitch>
		</xsl:if>
		<xsl:if test="attribute[@id='roll'] != ''">
			<eop:roll uom="deg">
				<xsl:apply-templates select="attribute[@id='roll']"/>
			</eop:roll>
		</xsl:if>
		<xsl:if test="attribute[@id='yaw'] != ''">
			<eop:yaw uom="deg">
				<xsl:apply-templates select="attribute[@id='yaw']"/>
			</eop:yaw>
		</xsl:if>
		<xsl:if test="$sType  = 'RADAR'">
			<xsl:if test="attribute[@id='polarisationMode'] != ''">
				<sar:polarisationMode>
					<xsl:apply-templates select="attribute[@id='polarisationMode']"/>
				</sar:polarisationMode>
			</xsl:if>
			<xsl:if test="attribute[@id='polarisationChannels'] != ''">
				<sar:polarisationChannels>
					<xsl:apply-templates select="attribute[@id='polarisationChannels']"/>
				</sar:polarisationChannels>
			</xsl:if>
			<xsl:if test="attribute[@id='antennaLookDirection'] != ''">
				<sar:antennaLookDirection>
					<xsl:apply-templates select="attribute[@id='antennaLookDirection']"/>
				</sar:antennaLookDirection>
			</xsl:if>
			<xsl:if test="attribute[@id='minimumIncidenceAngle'] != ''">
				<sar:minimumIncidenceAngle>
					<xsl:apply-templates select="attribute[@id='minimumIncidenceAngle']"/>
				</sar:minimumIncidenceAngle>
			</xsl:if>
			<xsl:if test="attribute[@id='maximumIncidenceAngle'] != ''">
				<sar:maximumIncidenceAngle>
					<xsl:apply-templates select="attribute[@id='maximumIncidenceAngle']"/>
				</sar:maximumIncidenceAngle>
			</xsl:if>
			<xsl:if test="attribute[@id='incidenceAngleVariation'] != ''">
				<sar:incidenceAngleVariation>
					<xsl:apply-templates select="attribute[@id='incidenceAngleVariation']"/>
				</sar:incidenceAngleVariation>
			</xsl:if>
			<xsl:if test="attribute[@id='dopplerFrequency'] != ''">
				<sar:dopplerFrequency>
					<xsl:apply-templates select="attribute[@id='dopplerFrequency']"/>
				</sar:dopplerFrequency>
			</xsl:if>
		</xsl:if>
		<xsl:if test="$sType  = 'ATMOSPHERIC'">
			<xsl:if test="attribute[@id='multiViewAngles'] != ''">
				<atm:multiViewAngles>
					<xsl:apply-templates select="attribute[@id='multiViewAngles']"/>
				</atm:multiViewAngles>
			</xsl:if>
			<xsl:if test="attribute[@id='centreViewAngles'] != ''">
				<atm:centreViewAngles>
					<xsl:apply-templates select="attribute[@id='centreViewAngles']"/>
				</atm:centreViewAngles>
			</xsl:if>
		</xsl:if>
		<xsl:if test="$sType  = 'ALTIMETRIC'">
			<xsl:if test="attribute[@id='cycleNumber'] != ''">
				<alt:cycleNumber>
					<xsl:apply-templates select="attribute[@id='cycleNumber']"/>
				</alt:cycleNumber>
			</xsl:if>
			<xsl:if test="attribute[@id='isSegment'] != ''">
				<alt:isSegment>
					<xsl:apply-templates select="attribute[@id='isSegment']"/>
				</alt:isSegment>
			</xsl:if>
			<xsl:if test="attribute[@id='relativePassNumber'] != ''">
				<alt:relativePassNumber>
					<xsl:apply-templates select="attribute[@id='relativePassNumber']"/>
				</alt:relativePassNumber>
			</xsl:if>
		</xsl:if>
	</xsl:template>
	<xsl:template name="fillEOR">
		<eop:product>
			<!--TODO 0..n-->
			<eop:ProductInformation>
				<eop:filename>
					<ows:ServiceReference xlink:href="">
						<xsl:attribute name="xlink:href"><xsl:apply-templates select="attribute[@id='productURI']"/></xsl:attribute>
						<ows:RequestMessage/>
					</ows:ServiceReference>
				</eop:filename>
				<xsl:if test="attribute[@id='productReferenceSystemIdentifier'] != ''">
					<eop:referenceSystemIdentifier>
						<xsl:apply-templates select="attribute[@id='productReferenceSystemIdentifier']"/>
					</eop:referenceSystemIdentifier>
				</xsl:if>
				<xsl:if test="attribute[@id='ProductVersion'] != ''">
					<eop:version>
						<xsl:apply-templates select="attribute[@id='productVersion']"/>
					</eop:version>
				</xsl:if>
				<xsl:if test="attribute[@id='productSize'] != ''">
					<eop:size uom="kb">
						<xsl:apply-templates select="attribute[@id='productSize']"/>
					</eop:size>
				</xsl:if>
				<!--Timeliness of the product, such as "near real time", "rush". Possible values are mission specific and 
					shall refer to mission/ground segment dedicated codeSpace. 
					Example of values could be "NRT" or "NOMINAL"
				-->
				<xsl:if test="attribute[@id='productTimeliness'] != ''">
					<eop:timeliness>
						<xsl:apply-templates select="attribute[@id='productTimeliness']"/>
					</eop:timeliness>
				</xsl:if>
			</eop:ProductInformation>
		</eop:product>
		<xsl:if test="attribute[@id='browseType'] != ''">
			<eop:browse>
				<!--TODO 0..n-->
				<eop:BrowseInformation>
					<eop:type>
						<xsl:apply-templates select="attribute[@id='browseType']"/>
					</eop:type>
					<xsl:if test="attribute[@id='browseSubType'] != ''">
						<eop:subtype>
							<xsl:apply-templates select="attribute[@id='browseSubType']"/>
						</eop:subtype>
					</xsl:if>
					<eop:referenceSystemIdentifier>
						<xsl:apply-templates select="attribute[@id='browseRreferenceSystemIdentifier']"/>
					</eop:referenceSystemIdentifier>
					<eop:filename>
						<ows:ServiceReference xlink:href="">
							<xsl:attribute name="xlink:href"><xsl:apply-templates select="attribute[@id='BrowseURI']"/></xsl:attribute>
							<ows:RequestMessage/>
						</ows:ServiceReference>
					</eop:filename>
				</eop:BrowseInformation>
			</eop:browse>
		</xsl:if>
		<xsl:if test="attribute[@id='maskType'] != ''">
			<eop:mask>
				<eop:MaskInformation>
					<eop:type>
						<xsl:apply-templates select="attribute[@id='maskType']"/>
					</eop:type>
					<xsl:if test="attribute[@id='maskSubType'] != ''">
						<eop:subtype>
							<xsl:apply-templates select="attribute[@id='maskSubType']"/>
						</eop:subtype>
					</xsl:if>
					<eop:format>
						<xsl:apply-templates select="attribute[@id='maskFormat']"/>
					</eop:format>
					<xsl:if test="attribute[@id='maskRreferenceSystemIdentifier'] != ''">
						<eop:referenceSystemIdentifier>
							<xsl:apply-templates select="attribute[@id='maskRreferenceSystemIdentifier']"/>
						</eop:referenceSystemIdentifier>
					</xsl:if>
					<xsl:if test="attribute[@id='maskFileName'] != ''">
						<eop:filename>
							<ows:ServiceReference xlink:href="">
								<xsl:attribute name="xlink:href"><xsl:apply-templates select="attribute[@id='MaskURI']"/></xsl:attribute>
								<ows:RequestMessage/>
							</ows:ServiceReference>
						</eop:filename>
					</xsl:if>
					<!--TBD Contains inline encoded mask polygon geometries using the gml:MultiSurface/gml:SurfaceMembers/gml:Polygon constructs.
		0..1 (either fileName or multiExtentOf shall be provided)-->
					<multiExtentOf>
						<gml:MultiSurface>
							<gml:SurfaceMembers>
								<gml:Polygon>
								</gml:Polygon>
							</gml:SurfaceMembers>
						</gml:MultiSurface>
					</multiExtentOf>
				</eop:MaskInformation>
			</eop:mask>
		</xsl:if>
		<xsl:if test="attribute[@id='phenomenon'] != ''">
			<eop:parameter>
				<!--TODO 0..1 -->
				<eop:ParameterInformation>
					<eop:unitOfMeasure>
						<!--TODO 0..n -->
						<xsl:apply-templates select="attribute[@id='unitOfMeasure']"/>
					</eop:unitOfMeasure>
					<eop:phenomenon>
						<xsl:apply-templates select="attribute[@id='phenomenon']"/>
					</eop:phenomenon>
				</eop:ParameterInformation>
			</eop:parameter>
		</xsl:if>
		<!--example of the use of the coverage element-->
		<eop:coverage xlink:href="http://hma.xxx.xx/wcseoserver/ows?Service=WCS&amp;Version=2.0.0&amp;Request=DescribeCoverage&amp;coverageId=coverageId"/>
		<xsl:if test="$sType  = 'OPTICAL'">
			<xsl:if test="attribute[@id='cloudCoverPercentage'] != ''">
				<opt:cloudCoverPercentage uom="%">
					<xsl:apply-templates select="attribute[@id='cloudCoverPercentage']"/>
				</opt:cloudCoverPercentage>
			</xsl:if>
			<xsl:if test="attribute[@id='cloudCoverPercentageAssessmentConfidence'] != ''">
				<opt:cloudCoverPercentageAssessmentConfidence uom="%">
					<xsl:apply-templates select="attribute[@id='cloudCoverPercentageAssessmentConfidence']"/>
				</opt:cloudCoverPercentageAssessmentConfidence>
			</xsl:if>
			<xsl:if test="attribute[@id='cloudCoverPercentageQuotationMode'] != ''">
				<opt:cloudCoverPercentageQuotationMode>
					<xsl:apply-templates select="attribute[@id='cloudCoverPercentageQuotationMode']"/>
				</opt:cloudCoverPercentageQuotationMode>
			</xsl:if>
			<xsl:if test="attribute[@id='snowCoverPercentage'] != ''">
				<opt:snowCoverPercentage uom="%">
					<xsl:apply-templates select="attribute[@id='snowCoverPercentage']"/>
				</opt:snowCoverPercentage>
			</xsl:if>
			<xsl:if test="attribute[@id='snowCoverPercentageAssessmentConfidence'] != ''">
				<opt:snowCoverPercentageAssessmentConfidence uom="%">
					<xsl:apply-templates select="attribute[@id='snowCoverPercentageAssessmentConfidence']"/>
				</opt:snowCoverPercentageAssessmentConfidence>
			</xsl:if>
			<xsl:if test="attribute[@id='snowCoverPercentageQuotationMode'] != ''">
				<opt:snowCoverPercentageQuotationMode>
					<xsl:apply-templates select="attribute[@id='snowCoverPercentageQuotationMode']"/>
				</opt:snowCoverPercentageQuotationMode>
			</xsl:if>
		</xsl:if>
		<xsl:if test="$sType  = 'SSP'">
			<xsl:if test="attribute[@id='cloudCoverPercentage'] != ''">
				<ssp:cloudCoverPercentage uom="%">
					<xsl:apply-templates select="attribute[@id='cloudCoverPercentage']"/>
				</ssp:cloudCoverPercentage>
			</xsl:if>
			<xsl:if test="attribute[@id='cloudCoverPercentageAssessmentConfidence'] != ''">
				<ssp:cloudCoverPercentageAssessmentConfidence uom="%">
					<xsl:apply-templates select="attribute[@id='cloudCoverPercentageAssessmentConfidence']"/>
				</ssp:cloudCoverPercentageAssessmentConfidence>
			</xsl:if>
			<xsl:if test="attribute[@id='cloudCoverPercentageQuotationMode'] != ''">
				<ssp:cloudCoverPercentageQuotationMode>
					<xsl:apply-templates select="attribute[@id='cloudCoverPercentageQuotationMode']"/>
				</ssp:cloudCoverPercentageQuotationMode>
			</xsl:if>
			<xsl:if test="attribute[@id='snowCoverPercentage'] != ''">
				<ssp:snowCoverPercentage uom="%">
					<xsl:apply-templates select="attribute[@id='snowCoverPercentage']"/>
				</ssp:snowCoverPercentage>
			</xsl:if>
			<xsl:if test="attribute[@id='snowCoverPercentageAssessmentConfidence'] != ''">
				<ssp:snowCoverPercentageAssessmentConfidence uom="%">
					<xsl:apply-templates select="attribute[@id='snowCoverPercentageAssessmentConfidence']"/>
				</ssp:snowCoverPercentageAssessmentConfidence>
			</xsl:if>
			<xsl:if test="attribute[@id='snowCoverPercentageQuotationMode'] != ''">
				<ssp:snowCoverPercentageQuotationMode>
					<xsl:apply-templates select="attribute[@id='snowCoverPercentageQuotationMode']"/>
				</ssp:snowCoverPercentageQuotationMode>
			</xsl:if>
		</xsl:if>
		<xsl:if test="$sType  = 'ATMOSPHERIC'">
			<xsl:if test="attribute[@id='speciesError'] != '' or attribute[@id='species'] != '' or attribute[@id='unit'] != '' or attribute[@id='verticalRange '] != '' or 
			attribute[@id='algorithmName'] != '' or attribute[@id='algorithmVersion'] != ''">
				<atm:dataLayers>
					<atm:DataLayer>
						<xsl:if test="attribute[@id='speciesError'] != ''">
							<atm:speciesError>
								<xsl:apply-templates select="attribute[@id='speciesError']"/>
							</atm:speciesError>
						</xsl:if>
						<xsl:if test="attribute[@id='species'] != ''">
							<atm:species>
								<xsl:apply-templates select="attribute[@id='species']"/>
							</atm:species>
						</xsl:if>
						<xsl:if test="attribute[@id='unit'] != ''">
							<atm:unit>
								<xsl:apply-templates select="attribute[@id='unit']"/>
							</atm:unit>
						</xsl:if>
						<xsl:if test="attribute[@id='verticalRange'] != ''">
							<atm:verticalRange>
								<xsl:apply-templates select="attribute[@id='verticalRange']"/>
							</atm:verticalRange>
						</xsl:if>
						<xsl:if test="attribute[@id='algorithmName'] != ''">
							<atm:algorithmName>
								<xsl:apply-templates select="attribute[@id='algorithmName']"/>
							</atm:algorithmName>
						</xsl:if>
						<xsl:if test="attribute[@id='algorithmVersion'] != ''">
							<atm:algorithmVersion>
								<xsl:apply-templates select="attribute[@id='algorithmVersion']"/>
							</atm:algorithmVersion>
						</xsl:if>
						<xsl:if test="attribute[@id='verticalResolution'] != ''">
							<atm:verticalResolution>
								<xsl:apply-templates select="attribute[@id='verticalResolution']"/>
							</atm:verticalResolution>
						</xsl:if>
					</atm:DataLayer>
				</atm:dataLayers>
			</xsl:if>
			<xsl:if test="attribute[@id='cloudCoverPercentage'] != ''">
				<atm:cloudCoverPercentage uom="%">
					<xsl:apply-templates select="attribute[@id='cloudCoverPercentage']"/>
				</atm:cloudCoverPercentage>
			</xsl:if>
			<xsl:if test="attribute[@id='cloudCoverPercentageAssessmentConfidence'] != ''">
				<atm:cloudCoverPercentageAssessmentConfidence uom="%">
					<xsl:apply-templates select="attribute[@id='cloudCoverPercentageAssessmentConfidence']"/>
				</atm:cloudCoverPercentageAssessmentConfidence>
			</xsl:if>
			<xsl:if test="attribute[@id='cloudCoverPercentageQuotationMode'] != ''">
				<atm:cloudCoverPercentageQuotationMode>
					<xsl:apply-templates select="attribute[@id='cloudCoverPercentageQuotationMode']"/>
				</atm:cloudCoverPercentageQuotationMode>
			</xsl:if>
			<xsl:if test="attribute[@id='snowCoverPercentage'] != ''">
				<atm:snowCoverPercentage uom="%">
					<xsl:apply-templates select="attribute[@id='snowCoverPercentage']"/>
				</atm:snowCoverPercentage>
			</xsl:if>
			<xsl:if test="attribute[@id='snowCoverPercentageAssessmentConfidence'] != ''">
				<atm:snowCoverPercentageAssessmentConfidence uom="%">
					<xsl:apply-templates select="attribute[@id='snowCoverPercentageAssessmentConfidence']"/>
				</atm:snowCoverPercentageAssessmentConfidence>
			</xsl:if>
			<xsl:if test="attribute[@id='snowCoverPercentageQuotationMode'] != ''">
				<atm:snowCoverPercentageQuotationMode>
					<xsl:apply-templates select="attribute[@id='snowCoverPercentageQuotationMode']"/>
				</atm:snowCoverPercentageQuotationMode>
			</xsl:if>
		</xsl:if>
	</xsl:template>
	<xsl:template name="fillEOE">
		<!--test if platform has an element (shortName exists)-->
		<!--shortName is not a unique id so it must be managed in a diffferent way-->
		
		<!--instrument-->		
		<xsl:choose>
			<xsl:when test="$sType = 'SSP' ">
				<!--TODO 0..n -->
				<ssp:instrument>
					<eop:Instrument>
						<eop:shortName>
							<xsl:apply-templates select="attribute[@id='instrumentShortName']"/>
						</eop:shortName>
					</eop:Instrument>
				</ssp:instrument>	
			</xsl:when>
			<xsl:otherwise>
			<eop:instrument>
			<eop:Instrument>
				<eop:shortName>
					<xsl:apply-templates select="attribute[@id='instrumentShortName']"/>
				</eop:shortName>
				<xsl:if test="attribute[@id='description'] != ''">
					<eop:description>
						<xsl:apply-templates select="attribute[@id='description']"/>
					</eop:description>
				</xsl:if>
				<xsl:if test="attribute[@id='instrumentType'] != ''">
					<eop:instrumentType>
						<xsl:apply-templates select="attribute[@id='instrumentType']"/>
					</eop:instrumentType>
				</xsl:if>
			</eop:Instrument>
		</eop:instrument>
		</xsl:otherwise>
		</xsl:choose>

					
			<xsl:if test="$sType = 'ALTIMETRIC' "><!--auxiliaryInstrument-->
			<xsl:if test="attribute[@id='instrumentType'] != ''">
				<!--TODO 0..n -->
				<alt:auxiliaryInstrument>
					<alt:instrumentType>
						<xsl:apply-templates select="attribute[@id='instrumentType']"/>
					</alt:instrumentType>
				</alt:auxiliaryInstrument>
			</xsl:if>
			</xsl:if>	
		
		<xsl:choose>		<!--platform-->
			<xsl:when test="$sType = 'SSP' ">
				<!--TODO 0..n -->
				<ssp:platform>
					<xsl:call-template name="fillPlat"/>
			</ssp:platform>
			</xsl:when>
			<xsl:otherwise>
				<eop:platform>
					<xsl:call-template name="fillPlat"/>
				</eop:platform>
				</xsl:otherwise>
	</xsl:choose>
		
		<xsl:choose> <!--sensor-->
			<xsl:when test="$sType  = 'LIMB'">
				<lmb:sensor>
					<lmb:Sensor>
						<xsl:call-template name="fillSens"/>
						<xsl:if test="attribute[@id='measurementType'] != ''">
							<lmb:measurementType>
								<xsl:apply-templates select="attribute[@id='measurementType']"/>
							</lmb:measurementType>
						</xsl:if>
					</lmb:Sensor>
				</lmb:sensor>
			</xsl:when>
			<xsl:otherwise>
				<eop:sensor>
					<eop:Sensor>
						<xsl:call-template name="fillSens"/>
					</eop:Sensor>
				</eop:sensor>
			</xsl:otherwise>
		</xsl:choose>
		<!-- we should include here an IF to check if at least one of the element is included in the config file-->
		<xsl:choose> <!--acquisitionParameters-->
			<xsl:when test="$sType  = 'RADAR'">
				<eop:acquisitionParameters>
					<sar:Acquisition>
						<xsl:call-template name="fillAcq"/>
					</sar:Acquisition>
				</eop:acquisitionParameters>
			</xsl:when>
			<xsl:when test="$sType  = 'ALTIMETRIC'">
				<eop:acquisitionParameters>
					<alt:Acquisition>
						<xsl:call-template name="fillAcq"/>
					</alt:Acquisition>
				</eop:acquisitionParameters>
			</xsl:when>
			<xsl:when test="$sType  = 'LIMB'">
				<lmb:acquisitionParameters>
					<lmb:Acquisition>
						<xsl:call-template name="fillAcq"/>
						<xsl:if test="attribute[@id='observationMode'] != ''">
							<lmb:observationMode>
								<xsl:apply-templates select="attribute[@id='observationMode']"/>
							</lmb:observationMode>
						</xsl:if>
						<xsl:if test="attribute[@id='verticalResolution'] != ''">
							<lmb:verticalResolution>
								<xsl:apply-templates select="attribute[@id='verticalResolution']"/>
							</lmb:verticalResolution>
						</xsl:if>
					</lmb:Acquisition>
				</lmb:acquisitionParameters>
			</xsl:when>
			<!--
				xsl:when test="$sType  = 'OPTICAL'">
                              
                                        <opt:Acquisition>
						<xsl:call-template name="fillAcq"/>
					</opt:Acquisition>
				</xsl:when>
				<xsl:when test="$sType  = 'ATMOSPHERIC'">
					<eop:acquisitionParameters>
                                            <atm:Acquisition>
						<xsl:call-template name="fillAcq"/>
                                            </atm:Acquisition>
                                            </eop:acquisitionParameters>
				</xsl:when>
				
				
				-->
			<xsl:otherwise>
				<eop:acquisitionParameters>
					<eop:Acquisition>
						<xsl:call-template name="fillAcq"/>
					</eop:Acquisition>
				</eop:acquisitionParameters>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="fillEOM">
		<eop:identifier>
					<xsl:apply-templates select="attribute[@id='productId']"/>
				</eop:identifier>
				<xsl:if test="attribute[@id='creationDate'] !=''">
					<eop:creationDate>
						<xsl:apply-templates select="attribute[@id='creationDate']"/>
					</eop:creationDate>
				</xsl:if>
				<xsl:if test="attribute[@id='insertionDate'] !=''">
					<eop:insertionDate>
						<xsl:apply-templates select="attribute[@id='insertionDate']"/>
					</eop:insertionDate>
				</xsl:if>
				<xsl:if test="attribute[@id='doi'] !=''">
					<eop:doi>
						<xsl:apply-templates select="attribute[@id='doi']"/>
					</eop:doi>
				</xsl:if>
				<xsl:if test="attribute[@id='parentIdentifier'] !=''">
					<eop:parentIdentifier>
						<xsl:apply-templates select="attribute[@id='parentIdentifier']"/>
					</eop:parentIdentifier>
				</xsl:if>
				<eop:acquisitionType>
					<xsl:apply-templates select="attribute[@id='acquisitionType']"/>
				</eop:acquisitionType>
				<xsl:if test="attribute[@id='acquisitionSubType'] !=''">
					<eop:acquisitionSubType>
						<xsl:apply-templates select="attribute[@id='acquisitionSubType']"/>
					</eop:acquisitionSubType>
				</xsl:if>
				<xsl:if test="attribute[@id='productType'] !=''">
					<eop:productType>
						<xsl:apply-templates select="attribute[@id='productType']"/>
					</eop:productType>
				</xsl:if>
				<eop:status>
					<xsl:apply-templates select="attribute[@id='status']"/>
				</eop:status>
				<xsl:if test="attribute[@id='statusSubType'] !=''">
					<eop:statusSubType>
						<xsl:apply-templates select="attribute[@id='statusSubType']"/>
					</eop:statusSubType>
				</xsl:if>
				<xsl:if test="attribute[@id='statusDetail'] !=''">
					<eop:statusDetail>
						<xsl:apply-templates select="attribute[@id='statusDetail']"/>
					</eop:statusDetail>
				</xsl:if>
				<xsl:if test="attribute[@id='acquisitionStation'] !=''">
					<eop:downlinkedTo>
						<!--TODO 0..n-->
						<eop:DownlinkInformation>
							<eop:acquisitionStation>
								<xsl:apply-templates select="attribute[@id='acquisitionStation']"/>
							</eop:acquisitionStation>
							<xsl:if test="attribute[@id='acquisitionDate'] !=''">
								<eop:acquisitionDate>
									<xsl:apply-templates select="attribute[@id='acquisitionDate']"/>
								</eop:acquisitionDate>
							</xsl:if>
						</eop:DownlinkInformation>
					</eop:downlinkedTo>
				</xsl:if>
				<xsl:if test="attribute[@id='archivingCenter'] !=''">
					<eop:archivedIn>
						<!--TODO 0..n-->
						<eop:ArchivingInformation>
							<eop:archivingCenter>
								<xsl:apply-templates select="attribute[@id='archivingCenter']"/>
							</eop:archivingCenter>
							<eop:archivingDate>
								<xsl:apply-templates select="attribute[@id='archivingDate']"/>
							</eop:archivingDate>
							<xsl:if test="attribute[@id='archivingIdentifier'] !=''">
								<eop:archivingIdentifier>
									<xsl:apply-templates select="attribute[@id='archivingIdentifier']"/>
								</eop:archivingIdentifier>
							</xsl:if>
						</eop:ArchivingInformation>
					</eop:archivedIn>
				</xsl:if>
				<!--				
				<xsl:if test="attribute[@id='imageQualityDegradation'] !=''">
					<eop:imageQualityDegradation uom="%">
						<xsl:apply-templates select="attribute[@id='imageQualityDegradation']"/>
					</eop:imageQualityDegradation>
				</xsl:if>
				<xsl:if test="attribute[@id='imageQualityStatus'] !=''">
					<eop:imageQualityStatus>
						<xsl:apply-templates select="attribute[@id='imageQualityStatus']"/>
					</eop:imageQualityStatus>
				</xsl:if>
				<xsl:if test="attribute[@id='imageQualityDegradationTag'] !=''">
					<eop:imageQualityDegradationTag>
						<xsl:apply-templates select="attribute[@id='imageQualityDegradationTag']"/>
					</eop:imageQualityDegradationTag>
				</xsl:if>
				<xsl:if test="attribute[@id='imageQualityReportURL'] !=''">
					<eop:imageQualityReportURL>
						<xsl:apply-templates select="attribute[@id='imageQualityReportURL']"/>
					</eop:imageQualityReportURL>
				</xsl:if>
-->
				<xsl:if test="attribute[@id='productQualityDegradation'] !=''">
					<eop:productQualityDegradation uom="%">
						<xsl:apply-templates select="attribute[@id='productQualityDegradation']"/>
					</eop:productQualityDegradation>
				</xsl:if>
				<xsl:if test="attribute[@id='productQualityStatus'] !=''">
					<eop:productQualityStatus>
						<xsl:apply-templates select="attribute[@id='productQualityStatus']"/>
					</eop:productQualityStatus>
				</xsl:if>
				<xsl:if test="attribute[@id='productQualityDegradationTag'] !=''">
					<eop:productQualityDegradationTag>
						<xsl:apply-templates select="attribute[@id='productQualityDegradationTag']"/>
					</eop:productQualityDegradationTag>
				</xsl:if>
				<xsl:if test="attribute[@id='productQualityReportURL'] !=''">
					<eop:productQualityReportURL>
						<xsl:apply-templates select="attribute[@id='productQualityReportURL']"/>
					</eop:productQualityReportURL>
				</xsl:if>
				<xsl:if test="attribute[@id='productQualityDegradationQuotationMode'] !=''">
					<eop:productQualityDegradationQuotationMode>
						<xsl:apply-templates select="attribute[@id='productQualityDegradationQuotationMode']"/>
					</eop:productQualityDegradationQuotationMode>
				</xsl:if>
				<xsl:if test="attribute[@id='min'] !=''">
					<eop:histograms>
						<!--TODO 0..n-->
						<eop:Histogram>
							<xsl:if test="attribute[@id='bandId'] !=''">
								<eop:bandId>
									<xsl:apply-templates select="attribute[@id='bandId']"/>
								</eop:bandId>
							</xsl:if>
							<eop:min>
								<xsl:apply-templates select="attribute[@id='min']"/>
							</eop:min>
							<eop:max>
								<xsl:apply-templates select="attribute[@id='max']"/>
							</eop:max>
							<xsl:if test="attribute[@id='mean'] !=''">
								<eop:mean>
									<xsl:apply-templates select="attribute[@id='mean']"/>
								</eop:mean>
							</xsl:if>
							<xsl:if test="attribute[@id='stdDeviation'] !=''">
								<eop:stdDeviation>
									<xsl:apply-templates select="attribute[@id='stdDeviation']"/>
								</eop:stdDeviation>
							</xsl:if>
						</eop:Histogram>
					</eop:histograms>
				</xsl:if>
				<!--Link to an EO product that is part of this EO product (e.g. a phr:DataStrip is composed of one or more phr:Scene)-->
				<xsl:if test="attribute[@id='composedOf'] !=''">
					<eop:composedOf>
						<!--TODO 0..n -->
						<xsl:apply-templates select="attribute[@id='composedOf']"/>
					</eop:composedOf>
				</xsl:if>
				<!--Link to the “father” EO product (e.g. a phr:Scene is a subset of a phr:DataStrip)-->
				<xsl:if test="attribute[@id='subsetOf'] !=''">
					<eop:subsetOf>
						<!--TODO 0..n-->
						<xsl:apply-templates select="attribute[@id='subsetOf']"/>
					</eop:subsetOf>
				</xsl:if>
				<!--Specify a link to another EO product (e.g. ERS1 and ERS2 interferometric pair) -->
				<xsl:if test="attribute[@id='linkedWith'] !=''">
					<eop:linkedWith>
						<!--TODO 0..n-->
						<xsl:apply-templates select="attribute[@id='linkedWith']"/>
					</eop:linkedWith>
				</xsl:if>
				<eop:processing>
					<xsl:if test="attribute[@id='processingMode'] !=''">
						<xsl:choose>
							<xsl:when test="$sType  = 'ALTIMETRIC'">
								<alt:ProcessingInformation>
									<eop:processingMode>
										<xsl:apply-templates select="attribute[@id='processingMode']"/>
									</eop:processingMode>
									<xsl:if test="attribute[@id='processingCenter'] !=''">
										<eop:processingCenter>
											<xsl:apply-templates select="attribute[@id='processingCenter']"/>
										</eop:processingCenter>
									</xsl:if>
									<xsl:if test="attribute[@id='processingDate'] !=''">
										<eop:processingDate>
											<xsl:apply-templates select="attribute[@id='processingDate']"/>
										</eop:processingDate>
									</xsl:if>
									<xsl:if test="attribute[@id='compositeType'] !=''">
										<eop:compositeType>
											<xsl:apply-templates select="attribute[@id='compositeType']"/>
										</eop:compositeType>
									</xsl:if>
									<xsl:if test="attribute[@id='method'] !=''">
										<eop:method>
											<xsl:apply-templates select="attribute[@id='method']"/>
										</eop:method>
									</xsl:if>
									<xsl:if test="attribute[@id='methodVersion'] !=''">
										<eop:methodVersion>
											<xsl:apply-templates select="attribute[@id='methodVersion']"/>
										</eop:methodVersion>
									</xsl:if>
									<xsl:if test="attribute[@id='processorName'] !=''">
										<eop:processorName>
											<xsl:apply-templates select="attribute[@id='processorName']"/>
										</eop:processorName>
									</xsl:if>
									<xsl:if test="attribute[@id='processorVersion'] !=''">
										<eop:processorVersion>
											<xsl:apply-templates select="attribute[@id='processorVersion']"/>
										</eop:processorVersion>
									</xsl:if>
									<xsl:if test="attribute[@id='processingLevel'] !=''">
										<eop:processingLevel>
											<xsl:apply-templates select="attribute[@id='processingLevel']"/>
										</eop:processingLevel>
									</xsl:if>
									<xsl:if test="attribute[@id='nativeProductFormat'] !=''">
										<eop:nativeProductFormat>
											<xsl:apply-templates select="attribute[@id='nativeProductFormat']"/>
										</eop:nativeProductFormat>
									</xsl:if>
									<xsl:if test="attribute[@id='auxiliaryDataSetFileName'] !=''">
										<eop:auxiliaryDataSetFileName>
											<xsl:apply-templates select="attribute[@id='auxiliaryDataSetFileName']"/>
										</eop:auxiliaryDataSetFileName>
									</xsl:if>
									<xsl:if test="attribute[@id='groundTrackUncertainty'] !=''">
										<alt:groundTrackUncertainty>
											<xsl:apply-templates select="attribute[@id='groundTrackUncertainty']"/>
										</alt:groundTrackUncertainty>
									</xsl:if>
									<xsl:if test="attribute[@id='productContentsType'] !=''">
										<alt:productContentsType>
											<xsl:apply-templates select="attribute[@id='productContentsType']"/>
										</alt:productContentsType>
									</xsl:if>
									<xsl:if test="attribute[@id='samplingRate'] !=''">
										<alt:samplingRate>
											<xsl:apply-templates select="attribute[@id='samplingRate']"/>
										</alt:samplingRate>
									</xsl:if>
								</alt:ProcessingInformation>
							</xsl:when>
							<xsl:otherwise>
								<eop:ProcessingInformation>
									<eop:processingMode>
										<xsl:apply-templates select="attribute[@id='processingMode']"/>
										<xsl:if test="attribute[@id='processingCenter'] !=''">
											<eop:processingCenter>
												<xsl:apply-templates select="attribute[@id='processingCenter']"/>
											</eop:processingCenter>
										</xsl:if>
										<xsl:if test="attribute[@id='processingDate'] !=''">
											<eop:processingDate>
												<xsl:apply-templates select="attribute[@id='processingDate']"/>
											</eop:processingDate>
										</xsl:if>
										<xsl:if test="attribute[@id='compositeType'] !=''">
											<eop:compositeType>
												<xsl:apply-templates select="attribute[@id='compositeType']"/>
											</eop:compositeType>
										</xsl:if>
										<xsl:if test="attribute[@id='method'] !=''">
											<eop:method>
												<xsl:apply-templates select="attribute[@id='method']"/>
											</eop:method>
										</xsl:if>
										<xsl:if test="attribute[@id='methodVersion'] !=''">
											<eop:methodVersion>
												<xsl:apply-templates select="attribute[@id='methodVersion']"/>
											</eop:methodVersion>
										</xsl:if>
										<xsl:if test="attribute[@id='processorName'] !=''">
											<eop:processorName>
												<xsl:apply-templates select="attribute[@id='processorName']"/>
											</eop:processorName>
										</xsl:if>
										<xsl:if test="attribute[@id='processorVersion'] !=''">
											<eop:processorVersion>
												<xsl:apply-templates select="attribute[@id='processorVersion']"/>
											</eop:processorVersion>
										</xsl:if>
										<xsl:if test="attribute[@id='processingLevel'] !=''">
											<eop:processingLevel>
												<xsl:apply-templates select="attribute[@id='processingLevel']"/>
											</eop:processingLevel>
										</xsl:if>
										<xsl:if test="attribute[@id='nativeProductFormat'] !=''">
											<eop:nativeProductFormat>
												<xsl:apply-templates select="attribute[@id='nativeProductFormat']"/>
											</eop:nativeProductFormat>
										</xsl:if>
										<xsl:if test="attribute[@id='auxiliaryDataSetFileName'] !=''">
											<eop:auxiliaryDataSetFileName>
												<xsl:apply-templates select="attribute[@id='auxiliaryDataSetFileName']"/>
											</eop:auxiliaryDataSetFileName>
										</xsl:if>
									</eop:processingMode>
								</eop:ProcessingInformation>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:if>
				</eop:processing>
				<xsl:if test="attribute[@id='productGroupId'] !=''">
					<eop:productGroupId>
						<xsl:apply-templates select="attribute[@id='productGroupId']"/>
					</eop:productGroupId>
				</xsl:if>
				<xsl:for-each select="attribute[substring-before(@id,'-')='add']">
					<eop:vendorSpecific>
						<eop:SpecificInformation>
							<eop:localAttribute>
								<xsl:value-of select="substring-after(@id,'-')"/>
							</eop:localAttribute>
							<eop:localValue>
								<xsl:apply-templates select="."/>
							</eop:localValue>
						</eop:SpecificInformation>
					</eop:vendorSpecific>
				</xsl:for-each>
	</xsl:template>
	<xsl:template name="fillFP">
		<eop:multiExtentOf>
			<gml:MultiSurface gml:id="ms_$velocityCount" srsName="EPSG:4326">
				<gml:surfaceMembers>
					<gml:Polygon gml:id="fppoly_$velocityCount">
						<gml:exterior>
							<gml:LinearRing>
								<gml:posList>
									<xsl:apply-templates select="attribute[@id='']"/>
								</gml:posList>
							</gml:LinearRing>
						</gml:exterior>
					</gml:Polygon>
				</gml:surfaceMembers>
			</gml:MultiSurface>
		</eop:multiExtentOf>
		<xsl:if test="attribute[@id='orientation'] !=''">
			<eop:orientation>
				<xsl:apply-templates select="attribute[@id='orientation']"/>
			</eop:orientation>
		</xsl:if>
		<xsl:if test="attribute[@id='centerOf'] !=''">
			<eop:centerOf>
				<xsl:apply-templates select="attribute[@id='centerOf']"/>
			</eop:centerOf>
		</xsl:if>
		<xsl:if test="$sType  = 'ALTIMETRIC'">
			<alt:nominalTrack>
				<gml:MultiCurve gml:id="alt_$velocityCount">
					<gml:curveMember>
						<gml:LineString gml:id="track1" srsName="EPSG:4326">
							<gml:coordinates>
								<xsl:apply-templates select="attribute[@id='']"/>
							</gml:coordinates>
						</gml:LineString>
					</gml:curveMember>
				</gml:MultiCurve>
			</alt:nominalTrack>
		</xsl:if>
		<xsl:if test="$sType  = 'LIMB'">
			<xsl:if test="attribute[@id='maximumAltitude'] != ''">
				<lmb:maximumAltitude uom="m">
					<xsl:apply-templates select="attribute[@id='maximumAltitude']"/>
				</lmb:maximumAltitude>
			</xsl:if>
			<xsl:if test="attribute[@id='minimumAltitude'] != ''">
				<lmb:minimumAltitude uom="m">
					<xsl:apply-templates select="attribute[@id='minimumAltitude']"/>
				</lmb:minimumAltitude>
			</xsl:if>
			<lmb:nominalTrack>
				<gml:MultiCurve gml:id="lmb_$velocityCount">
					<gml:curveMember>
						<!--TODO: here we assume only one track-->
						<gml:LineString gml:id="track1" srsName="EPSG:4326">
							<gml:coordinates>
								<xsl:apply-templates select="attribute[@id='']"/>
							</gml:coordinates>
						</gml:LineString>
					</gml:curveMember>
				</gml:MultiCurve>
			</lmb:nominalTrack>
			<lmb:occultationPoints>
				<gml:MultiPoint gml:id="occ_$velocityCount" srsName="EPSG:4326">
					<gml:pointMember>
						<!--TODO: here we assume only one profile-->
						<gml:Point gml:id="profile1">
							<gml:coordinates>
								<xsl:apply-templates select="attribute[@id='']"/>
							</gml:coordinates>
						</gml:Point>
					</gml:pointMember>
				</gml:MultiPoint>
			</lmb:occultationPoints>
		</xsl:if>
		<xsl:if test="$sType  = 'SSP'">
			<xsl:if test="attribute[@id='locationName'] != ''">
				<gml:locationName>
					<xsl:apply-templates select="attribute[@id='locationName']"/>
				</gml:locationName>
			</xsl:if>		
		</xsl:if>
	</xsl:template>
	<xsl:template name="fillPlat">	
	<eop:Platform>
						<eop:shortName>
							<xsl:apply-templates select="attribute[@id='platformShortName']"/>
						</eop:shortName>
					<xsl:if test="attribute[@id='serialIdentifier'] != ''">
					<eop:serialIdentifier>
						<xsl:apply-templates select="attribute[@id='serialIdentifier']"/>
					</eop:serialIdentifier>
				</xsl:if>
				<xsl:if test="attribute[@id='orbitType'] != ''">
					<eop:orbitType>
						<xsl:apply-templates select="attribute[@id='orbitType']"/>
					</eop:orbitType>
				</xsl:if>
			</eop:Platform>	
	</xsl:template>
	<xsl:template name="fillSens">
		<xsl:if test="attribute[@id='sensorType'] != ''">
			<eop:sensorType>
				<xsl:apply-templates select="attribute[@id='sensorType']"/>
			</eop:sensorType>
		</xsl:if>
		<eop:operationalMode codeSpace="any:sensorMode">
			<xsl:apply-templates select="attribute[@id='operationalMode']"/>
		</eop:operationalMode>
		<xsl:if test="attribute[@id='resolution'] != ''">
			<eop:resolution>
				<xsl:apply-templates select="attribute[@id='resolution']"/>
			</eop:resolution>
		</xsl:if>
		<xsl:if test="attribute[@id='swathIdentifier'] != ''">
			<eop:swathIdentifier>
				<xsl:apply-templates select="attribute[@id='swathIdentifier']"/>
			</eop:swathIdentifier>
		</xsl:if>
		<xsl:if test="attribute[@id='discreteWavelengths'] != '' or attribute[@id='endWavelength'] != '' or attribute[@id='spectralRange'] != '' or attribute[@id='startWavelength'] != '' or attribute[@id='wavelengthResolution'] != ''">
			<eop:wavelengthInformation>
				<eop:WavelengthInformation>
					<xsl:if test="attribute[@id='discreteWavelengths'] != ''">
						<eop:discreteWavelengths>
							<xsl:apply-templates select="attribute[@id='discreteWavelengths']"/>
						</eop:discreteWavelengths>
					</xsl:if>
					<xsl:if test="attribute[@id='endWavelength'] != ''">
						<eop:endWavelength>
							<xsl:apply-templates select="attribute[@id='endWavelength']"/>
						</eop:endWavelength>
					</xsl:if>
					<xsl:if test="attribute[@id='spectralRange'] != ''">
						<eop:spectralRange>
							<xsl:apply-templates select="attribute[@id='spectralRange']"/>
						</eop:spectralRange>
					</xsl:if>
					<xsl:if test="attribute[@id='startWavelength'] != ''">
						<eop:startWavelength>
							<xsl:apply-templates select="attribute[@id='startWavelength']"/>
						</eop:startWavelength>
					</xsl:if>
					<xsl:if test="attribute[@id='wavelengthResolution'] != ''">
						<eop:wavelengthResolution>
							<xsl:apply-templates select="attribute[@id='wavelengthResolution']"/>
						</eop:wavelengthResolution>
					</xsl:if>
				</eop:WavelengthInformation>
			</eop:wavelengthInformation>
		</xsl:if>
	</xsl:template>
	<xsl:template match="generalConstant ">
#set( $<xsl:value-of select="@name"/> = "<xsl:value-of select="."/>" )
</xsl:template>
	<xsl:template match="attribute">
		<xsl:apply-templates select="*"/>
	</xsl:template>
	<xsl:template match="defaultValue">
		<xsl:value-of select="."/>
	</xsl:template>
	<!--xsl:template match="indexFieldName">$metadata.<xsl:value-of select="."/></xsl:template-->
	<xsl:template match="indexFieldName">#if( $metadata.<xsl:value-of select="."/> != '' )$metadata.<xsl:value-of select="."/>#end</xsl:template>
	<xsl:template match="formula">
		<xsl:value-of select="."/>
	</xsl:template>
	<xsl:template name="extract">
		<xsl:param name="attribute"/>
		<xsl:choose>
			<xsl:when test="$attribute/indexFieldName != ''">$<xsl:value-of select="$attribute/indexFieldName"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:apply-templates select="$attribute"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
</xsl:transform>


